mySQL8.O command line  client:-
admin123
┌────┬─────────────────────┬───────────────────────────┬──────────┬──────────┐
│ id │        title        │        description        │ priority │ complete │
├────┼─────────────────────┼───────────────────────────┼──────────┼──────────┤
│ 1  │ Go to the store     │ Pick the egg              │ 5        │ 0        │   
│ 2  │ cut the lawn        │ Grass is getting long     │ 3        │ 1        │
│ 3  │ feed the dog        │ He is getting hungry      │ 5        │ 0        │   
│ 4  │ water plant         │ inside and outside plants │ 4        │ 0        │
│ 5  │ Learn something new │ Learn to program          │ 5        │ 0        │   
└────┴─────────────────────┴───────────────────────────┴──────────┴──────────┘
sqlite> update todos set complete = False  where priority=3 
   ...> ;
sqlite> select * from todos;
┌────┬─────────────────────┬───────────────────────────┬──────────┬──────────┐
│ id │        title        │        description        │ priority │ complete │
├────┼─────────────────────┼───────────────────────────┼──────────┼──────────┤
│ 1  │ Go to the store     │ Pick the egg              │ 5        │ 0        │   
│ 2  │ cut the lawn        │ Grass is getting long     │ 3        │ 0        │
│ 3  │ feed the dog        │ He is getting hungry      │ 5        │ 0        │   
│ 4  │ water plant         │ inside and outside plants │ 4        │ 0        │
│ 5  │ Learn something new │ Learn to program          │ 5        │ 0        │
└────┴─────────────────────┴───────────────────────────┴──────────┴──────────┘   
sqlite> delete from todos where priority=4; 
sqlite> select * from todos;
┌────┬─────────────────────┬───────────────────────┬──────────┬──────────┐
│ id │        title        │      description      │ priority │ complete │
├────┼─────────────────────┼───────────────────────┼──────────┼──────────┤       
│ 1  │ Go to the store     │ Pick the egg          │ 5        │ 0        │
│ 2  │ cut the lawn        │ Grass is getting long │ 3        │ 0        │
│ 3  │ feed the dog        │ He is getting hungry  │ 5        │ 0        │       
│ 5  │ Learn something new │ Learn to program      │ 5        │ 0        │
└────┴─────────────────────┴───────────────────────┴──────────┴──────────┘       
sqlite> update todos set id=4 where title= 'Learn something new';             
sqlite> select * from todos;
┌────┬─────────────────────┬───────────────────────┬──────────┬──────────┐
│ id │        title        │      description      │ priority │ complete │       
├────┼─────────────────────┼───────────────────────┼──────────┼──────────┤
│ 1  │ Go to the store     │ Pick the egg          │ 5        │ 0        │
│ 2  │ cut the lawn        │ Grass is getting long │ 3        │ 0        │
│ 3  │ feed the dog        │ He is getting hungry  │ 5        │ 0        │       
│ 4  │ Learn something new │ Learn to program      │ 5        │ 0        │
└────┴─────────────────────┴───────────────────────┴──────────┴──────────┘
sqlite> update todos set title = Cut the lawn  where id = 2;                     
Parse error: near "the": syntax error
  update todos set title = Cut the lawn  where id = 2;
                 error here ---^
sqlite> update todos set title = 'Cut the lawn' where id = 2; 
sqlite> select * from todos;                                  
┌────┬─────────────────────┬───────────────────────┬──────────┬──────────┐
│ id │        title        │      description      │ priority │ complete │       
├────┼─────────────────────┼───────────────────────┼──────────┼──────────┤
│ 1  │ Go to the store     │ Pick the egg          │ 5        │ 0        │
│ 2  │ Cut the lawn        │ Grass is getting long │ 3        │ 0        │       
│ 3  │ feed the dog        │ He is getting hungry  │ 5        │ 0        │
│ 4  │ Learn something new │ Learn to program      │ 5        │ 0        │       
└────┴─────────────────────┴───────────────────────┴──────────┴──────────┘
sqlite> update todos set title ='Feed the dog'  where id = 3; 
sqlite> select * from todos;
┌────┬─────────────────────┬───────────────────────┬──────────┬──────────┐
│ id │        title        │      description      │ priority │ complete │       
├────┼─────────────────────┼───────────────────────┼──────────┼──────────┤
│ 1  │ Go to the store     │ Pick the egg          │ 5        │ 0        │       
│ 2  │ Cut the lawn        │ Grass is getting long │ 3        │ 0        │
│ 3  │ Feed the dog        │ He is getting hungry  │ 5        │ 0        │       
│ 4  │ Learn something new │ Learn to program      │ 5        │ 0        │
└────┴─────────────────────┴───────────────────────┴──────────┴──────────┘       
sqlite> .mode column                                          
sqlite> select * from todos;
id  title                description            priority  complete
--  -------------------  ---------------------  --------  --------
1   Go to the store      Pick the egg           5         0       
2   Cut the lawn         Grass is getting long  3         0
3   Feed the dog         He is getting hungry   5         0       
4   Learn something new  Learn to program       5         0       
sqlite> .mode table
sqlite> select * from todos;
+----+---------------------+-----------------------+----------+----------+
| id |        title        |      description      | priority | complete |       
+----+---------------------+-----------------------+----------+----------+
| 1  | Go to the store     | Pick the egg          | 5        | 0        |       
| 2  | Cut the lawn        | Grass is getting long | 3        | 0        |
| 3  | Feed the dog        | He is getting hungry  | 5        | 0        |       
| 4  | Learn something new | Learn to program      | 5        | 0        |
+----+---------------------+-----------------------+----------+----------+       
sqlite> .mode box
sqlite> select * from todos;
┌────┬─────────────────────┬───────────────────────┬──────────┬──────────┐
│ id │        title        │      description      │ priority │ complete │
├────┼─────────────────────┼───────────────────────┼──────────┼──────────┤
│ 1  │ Go to the store     │ Pick the egg          │ 5        │ 0        │       
│ 2  │ Cut the lawn        │ Grass is getting long │ 3        │ 0        │
│ 3  │ Feed the dog        │ He is getting hungry  │ 5        │ 0        │       
│ 4  │ Learn something new │ Learn to program      │ 5        │ 0        │
└────┴─────────────────────┴───────────────────────┴──────────┴──────────┘ 

Type of Relationships in SQL:-
1). One- to- Many:- one teacher can teach many courses.  (one teacher->many courses)
2). Many-to-one:- Many courses have a single teacher. (many courses->one teacher)

mysql> CREATE DATABASE school;
Query OK, 1 row affected (0.01 sec)

mysql> USE school;
Database changed
mysql> CREATE TABLE Teachers (
    ->     teacher_id INT PRIMARY KEY,
    ->     first_name VARCHAR(255),
    ->     last_name VARCHAR(255)
    -> );
Query OK, 0 rows affected (0.02 sec)

mysql> CREATE TABLE Courses (
    ->     course_id INT PRIMARY KEY,
    ->     course_name VARCHAR(255),
    ->     teacher_id INT,
    ->     FOREIGN KEY (teacher_id) REFERENCES Teachers(teacher_id)
    -> );
Query OK, 0 rows affected (0.07 sec)

mysql> SHOW TABLES;
+------------------+
| Tables_in_school |
+------------------+
| courses          |
| teachers         |
+------------------+
mysql> insert into teachers(teacher_id, first_name, last_name)values(1, 'Aman', 'Sandhu');
Query OK, 1 row affected (0.01 sec)

mysql> select *from teachers;
+------------+------------+-----------+
| teacher_id | first_name | last_name |
+------------+------------+-----------+
|          1 | Aman       | Sandhu    |
+------------+------------+-----------+
1 row in set (0.00 sec)

mysql> insert into teachers(teacher_id, first_name, last_name)values(2, 'Raman', 'Sharma');
Query OK, 1 row affected (0.00 sec)
mysql> insert into teachers(teacher_id, first_name, last_name)values(3, 'Kajal', 'Verma');
Query OK, 1 row affected (0.00 sec)
mysql> insert into teachers(teacher_id, first_name, last_name)values(3, 'Kajal', 'Verma');
Query OK, 1 row affected (0.00 sec)
mysql> insert into teachers(teacher_id, first_name, last_name)values(4, 'Rahul', 'Sharma');
Query OK, 1 row affected (0.00 sec)
mysql> insert into teachers(teacher_id, first_name, last_name)values(5, 'Ram', 'Singh');
Query OK, 1 row affected (0.00 sec)

mysql> select *from teachers;
+------------+------------+-----------+
| teacher_id | first_name | last_name |
+------------+------------+-----------+
|          1 | Aman       | Sandhu    |
|          2 | Raman      | Sharma    |
|          3 | Kajal      | Verma     |
|          4 | Rahul      | Sharma    |
|          5 | Ram        | Singh     |
+------------+------------+-----------+
5 rows in set (0.00 sec)

3). One-to-One: one person assigned a unique ID number. or (one-account->one e-mail address)
mysql> CREATE TABLE Users (
    -> user_id INT PRIMARY KEY,
    -> username VARCHAR(50));
Query OK, 0 rows affected (0.02 sec)
mysql> CREATE TABLE User_profile(
    -> profile_id INT PRIMARY KEY,
    -> user_id INT UNIQUE,
    -> profile_data VARCHAR(255),
    -> FOREIGN KEY(user_id) REFERENCES users(user_id));
Query OK, 0 rows affected (0.06 sec)

mysql> show tables
    -> ;
+------------------+
| Tables_in_school |
+------------------+
| courses          |
| teachers         |
| user_profile     |
| users            |
+------------------+
4 rows in set (0.00 sec)
mysql> INSERT INTO Users (user_id, username) VALUES
    -> (1, 'alice'),
    -> (2, 'bob'),
    -> (3, 'charlie'),
    -> (4, 'diana'),
    -> (5, 'eric');
Query OK, 5 rows affected (0.01 sec)
mysql> INSERT INTO user_profile (profile_id, user_id, profile_data) VALUES
    -> (1, 1, 'Alice Profile Info');
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO user_profile (profile_id, user_id, profile_data) VALUES
    -> (2, 2, 'Bob Profile Info');
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO user_profile (profile_id, user_id, profile_data) VALUES
    -> (3, 3, 'Charlie Profile Info');
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO user_profile (profile_id, user_id, profile_data) VALUES
    -> (4, 4, 'Diana Profile Info');
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO user_profile (profile_id, user_id, profile_data) VALUES
    -> (5, 5, 'Eric Profile Info');
Query OK, 1 row affected (0.00 sec)

mysql> select * from user_profile;
+------------+---------+----------------------+
| profile_id | user_id | profile_data         |
+------------+---------+----------------------+
|          1 |       1 | Alice Profile Info   |
|          2 |       2 | Bob Profile Info     |
|          3 |       3 | Charlie Profile Info |
|          4 |       4 | Diana Profile Info   |
|          5 |       5 | Eric Profile Info    |
+------------+---------+----------------------+
5 rows in set (0.00 sec)

4). Many-to-Many: Each customer can by multiple products and each product can be bought by multiple customer, Each author can write many books and each books can have many authors).
mysql> CREATE TABLE Authors (
    ->     author_id INT PRIMARY KEY,
    ->     author_name VARCHAR(100)
    -> );
Query OK, 0 rows affected (0.04 sec)

mysql>
mysql> CREATE TABLE Books (
    ->     book_id INT PRIMARY KEY,
    ->     book_title VARCHAR(255)
    -> );
Query OK, 0 rows affected (0.02 sec)

mysql>
mysql> CREATE TABLE Author_Book (
    ->     author_id INT,
    ->     book_id INT,
    ->     PRIMARY KEY (author_id, book_id),
    ->     FOREIGN KEY (author_id) REFERENCES Authors(author_id),
    ->     FOREIGN KEY (book_id) REFERENCES Books(book_id)
    -> );
Query OK, 0 rows affected (0.06 sec)

mysql> INSERT INTO Authors (author_id, author_name) VALUES
    -> (1, 'Author A'),
    -> (2, 'Author B'),
    -> (3, 'Author C');
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0
mysql> select*from Authors
    -> ;
+-----------+-------------+
| author_id | author_name |
+-----------+-------------+
|         1 | Author A    |
|         2 | Author B    |
|         3 | Author C    |
+-----------+-------------+
3 rows in set (0.00 sec)

mysql> INSERT INTO Books (book_id, book_title) VALUES
    -> (1, 'Book X'),
    -> (2, 'Book Y'),
    -> (3, 'Book Z');
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> INSERT INTO Author_Book (author_id, book_id) VALUES
    -> (1,1),
    -> (1,2),
    -> (2,2),
    -> (2,3),
    -> (3,1),
    -> (3,3);
Query OK, 6 rows affected (0.01 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql> select * Books;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'Books' at line 1
mysql> select * from Books;
+---------+------------+
| book_id | book_title |
+---------+------------+
|       1 | Book X     |
|       2 | Book Y     |
|       3 | Book Z     |
+---------+------------+
3 rows in set (0.00 sec)

mysql> select * from Author_Book;
+-----------+---------+
| author_id | book_id |
+-----------+---------+
|         1 |       1 |
|         3 |       1 |
|         1 |       2 |
|         2 |       2 |
|         2 |       3 |
|         3 |       3 |
+-----------+---------+
6 rows in set (0.00 sec)

2 rows in set (0.01 sec)


# Create a table
mysql> CREATE TABLE Employee (
    ->     ID INT(4) NOT NULL PRIMARY KEY,
    ->     First_Name VARCHAR(30) NOT NULL,
    ->     Last_Name VARCHAR(30) NOT NULL,
    ->     User_ID VARCHAR(10) UNIQUE,
    ->     Salary DECIMAL(9,2),
    ->     CHECK (Salary > 5000)
    -> );
Query OK, 0 rows affected, 1 warning (0.06 sec)

mysql> INSERT INTO Employee (ID, First_Name, Last_Name, User_ID, Salary) VALUES
    -> (1001, 'Aman', 'Singh', 'aman01', 6000.00),
    -> (1002, 'Raman', 'Sharma', 'raman02', 7500.50),
    -> (1003, 'Kajal', 'Verma', 'kajal03', 8200.75),
    -> (1004, 'Rahul', 'Sharma', 'rahul04', 9000.00),
    -> (1005, 'Ram', 'Singh', 'ram05', 5500.00);
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> select * from Employee
    -> ;
+------+------------+-----------+---------+---------+
| ID   | First_Name | Last_Name | User_ID | Salary  |
+------+------------+-----------+---------+---------+
| 1001 | Aman       | Singh     | aman01  | 6000.00 |
| 1002 | Raman      | Sharma    | raman02 | 7500.50 |
| 1003 | Kajal      | Verma     | kajal03 | 8200.75 |
| 1004 | Rahul      | Sharma    | rahul04 | 9000.00 |
| 1005 | Ram        | Singh     | ram05   | 5500.00 |
+------+------------+-----------+---------+---------+
5 rows in set (0.00 sec)

# For record with ID+1003 update record with Last_Name, User_ID and Salary.

mysql> UPDATE Employee SET
    ->     First_Name='Karan',
    ->     User_ID='karan103',
    ->     Salary=10000
    -> WHERE ID=1003;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from Employee;
+------+------------+-----------+----------+----------+
| ID   | First_Name | Last_Name | User_ID  | Salary   |
+------+------------+-----------+----------+----------+
| 1001 | Aman       | Singh     | aman01   |  6000.00 |
| 1002 | Raman      | Sharma    | raman02  |  7500.50 |
| 1003 | Karan      | Verma     | karan103 | 10000.00 |
| 1004 | Rahul      | Sharma    | rahul04  |  9000.00 |
| 1005 | Ram        | Singh     | ram05    |  5500.00 |
+------+------------+-----------+----------+----------+

# make the changes permanent 
COMMIT;
# modify the Last_Name, of the Employee ID=1003, to Gautam.
 
mysql> UPDATE Employee
    -> SET Last_Name='Gautam'
    -> WHERE ID=1003;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select *from Employee;
+------+------------+-----------+----------+----------+
| ID   | First_Name | Last_Name | User_ID  | Salary   |
+------+------------+-----------+----------+----------+
| 1001 | Aman       | Singh     | aman01   |  6000.00 |
| 1002 | Raman      | Sharma    | raman02  |  7500.50 |
| 1003 | Karan      | Gautam    | karan103 | 10000.00 |
| 1004 | Rahul      | Sharma    | rahul04  |  9000.00 |
| 1005 | Ram        | Singh     | ram05    |  5500.00 |
+------+------------+-----------+----------+----------+

#modify the salary, and increase it by 1000, for all who get salary less than 6000.

mysql> UPDATE Employee
    -> SET Salary= Salary+1000
    -> WHERE Salary<6000;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * FROM Employee;
+------+------------+-----------+----------+----------+
| ID   | First_Name | Last_Name | User_ID  | Salary   |
+------+------------+-----------+----------+----------+
| 1001 | Aman       | Singh     | aman01   |  6000.00 |
| 1002 | Raman      | Sharma    | raman02  |  7500.50 |
| 1003 | Karan      | Gautam    | karan103 | 10000.00 |
| 1004 | Rahul      | Sharma    | rahul04  |  9000.00 |
| 1005 | Ram        | Singh     | ram05    |  6500.00 |
+------+------------+-----------+----------+----------+

#Delete the employee record having First_Name as Siddharth.

mysql> DELETE FROM Employee
    -> WHERE First_Name='Raman';
Query OK, 1 row affected (0.00 sec)

mysql> select * from Employee;
+------+------------+-----------+----------+----------+
| ID   | First_Name | Last_Name | User_ID  | Salary   |
+------+------------+-----------+----------+----------+
| 1001 | Aman       | Singh     | aman01   |  6000.00 |
| 1003 | Karan      | Gautam    | karan103 | 10000.00 |
| 1004 | Rahul      | Sharma    | rahul04  |  9000.00 |
| 1005 | Ram        | Singh     | ram05    |  6500.00 |
+------+------------+-----------+----------+----------+
4 rows in set (0.00 sec)

#identify the number and types of constraints in the table orders
mysql> Create TABLE Orders(
    -> O_id int NOT NULL,
    -> OrderNo int NOT NULL,
    -> P_ID int,
    -> PRIMARY KEY (O_id),
    -> FOREIGN KEY(P_ID) REFERENCES Persons(P_ID));
ANS:The table Orders you created has these constraints:

1).PRIMARY KEY (O_id):

Ensures each order has a unique, non-null identifier.

Guarantees uniqueness and not null on the O_id column.

2).FOREIGN KEY (P_ID) REFERENCES Persons(P_ID):

Enforces referential integrity to ensure the P_ID in Orders matches a valid P_ID in Persons.

Prevents adding orders with invalid or non-existent person IDs.

3).NOT NULL on O_id and OrderNo:

Both O_id and OrderNo columns require values; they cannot be null.

#Remove the entire contents of the table;
 DELETE FROM Employee;

# Add one column Email of data type VARCHAR and size 30 to the table Customer.
ALTER TABLE Customer
ADD (Email Varchar(30));

# To see the field names, data types, and other table structure details for the CAND table, you can run this command in MySQL:
mysql> SHOW COLUMNS FROM CAND;
for eg:-

mysql> CREATE TABLE CAND(
    -> CNUM INT,
    -> CNAME  VARCHAR(30),
    -> DOB Date NOT NULL);
Query OK, 0 rows affected (0.02 sec)

mysql> SELECT * FROM CAND;
Empty set (0.00 sec)

mysql> SHOW COLUMNS FROM CAND;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| CNUM  | int         | YES  |     | NULL    |       |
| CNAME | varchar(30) | YES  |     | NULL    |       |
| DOB   | date        | NO   |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
3 rows in set (0.02 sec)



Command cancel karna:

Bas Ctrl + C press karein.

Isse aap current incomplete command se bahar aa jayenge aur MySQL prompt dobara mysql> dikhayega.


Type of Relationships in SQL:-
1). Many-to-one:

mysql> CREATE DATABASE school;
Query OK, 1 row affected (0.01 sec)

mysql> USE school;
Database changed
mysql> CREATE TABLE Teachers (
    ->     teacher_id INT PRIMARY KEY,
    ->     first_name VARCHAR(255),
    ->     last_name VARCHAR(255)
    -> );
Query OK, 0 rows affected (0.02 sec)

mysql> CREATE TABLE Courses (
    ->     course_id INT PRIMARY KEY,
    ->     course_name VARCHAR(255),
    ->     teacher_id INT,
    ->     FOREIGN KEY (teacher_id) REFERENCES Teachers(teacher_id)
    -> );
Query OK, 0 rows affected (0.07 sec)

mysql> SHOW TABLES;
+------------------+
| Tables_in_school |
+------------------+
| courses          |
| teachers         |
+------------------+
mysql> insert into teachers(teacher_id, first_name, last_name)values(1, 'Aman', 'Sandhu');
Query OK, 1 row affected (0.01 sec)

mysql> select *from teachers;
+------------+------------+-----------+
| teacher_id | first_name | last_name |
+------------+------------+-----------+
|          1 | Aman       | Sandhu    |
+------------+------------+-----------+
1 row in set (0.00 sec)

mysql> insert into teachers(teacher_id, first_name, last_name)values(2, 'Raman', 'Sharma');
Query OK, 1 row affected (0.00 sec)
mysql> insert into teachers(teacher_id, first_name, last_name)values(3, 'Kajal', 'Verma');
Query OK, 1 row affected (0.00 sec)
mysql> insert into teachers(teacher_id, first_name, last_name)values(3, 'Kajal', 'Verma');
Query OK, 1 row affected (0.00 sec)
mysql> insert into teachers(teacher_id, first_name, last_name)values(4, 'Rahul', 'Sharma');
Query OK, 1 row affected (0.00 sec)
mysql> insert into teachers(teacher_id, first_name, last_name)values(5, 'Ram', 'Singh');
Query OK, 1 row affected (0.00 sec)

mysql> select *from teachers;
+------------+------------+-----------+
| teacher_id | first_name | last_name |
+------------+------------+-----------+
|          1 | Aman       | Sandhu    |
|          2 | Raman      | Sharma    |
|          3 | Kajal      | Verma     |
|          4 | Rahul      | Sharma    |
|          5 | Ram        | Singh     |
+------------+------------+-----------+
5 rows in set (0.00 sec)

# You can use the following command to view all the tables present in your database.
mysql> SHOW TABLES;
+------------------+
| Tables_in_school |
+------------------+
| author_book      |
| authors          |
| books            |
| cand             |
| courses          |
| employee         |
| student_courses  |
| students         |
| teachers         |
| user_profile     |
| users            |
+------------------+
11 rows in set (0.02 sec)

# If you choose one, then use the following command:

mysql> describe users;
+----------+-------------+------+-----+---------+-------+
| Field    | Type        | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| user_id  | int         | NO   | PRI | NULL    |       |
| username | varchar(50) | YES  |     | NULL    |       |
+----------+-------------+------+-----+---------+-------+
2 rows in set (0.00 sec)

# To view all rows:
mysql> SELECT * FROM users;
+---------+----------+
| user_id | username |
+---------+----------+
|       1 | alice    |
|       2 | bob      |
|       3 | charlie  |
|       4 | diana    |
|       5 | eric     |
+---------+----------+
5 rows in set (0.00 sec)
2 rows in set (0.01 sec)

#      JOINS

# 1). Inner Join:

mysql> CREATE TABLE STUDENT(
    -> Rollno INT NOT NULL,
    -> Name VARCHAR(100));
Query OK, 0 rows affected (0.02 sec)

mysql> INSERT INTO STUDENT(Rollno, Name) VALUES(1, 'Harsh');
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO STUDENT(Rollno, Name) VALUES(2, 'Pratik');
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO STUDENT(Rollno, Name) VALUES(3, 'Riyanka');
Query OK, 1 row affected (0.00 sec)

mysql> SELECT * FROM STUDENT;
+--------+---------+
| Rollno | Name    |
+--------+---------+
|      1 | Harsh   |
|      2 | Pratik  |
|      3 | Riyanka |
+--------+---------+
3 rows in set (0.00 sec)

mysql> CREATE TABLE studentcourse(
    -> Courseid INT NOT NULL,
    -> Rollno INT );
Query OK, 0 rows affected (0.06 sec)

mysql> INSERT INTO StudentCourse(Courseid, Rollno) VALUES(1,1);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO StudentCourse(Courseid, Rollno) VALUES(2, 2);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO StudentCourse(Courseid, Rollno) VALUES(2, 3);
Query OK, 1 row affected (0.00 sec)

mysql> SELECT * FROM StudentCourse;
+----------+--------+
| Courseid | Rollno |
+----------+--------+
|        1 |      1 |
|        2 |      2 |
|        2 |      3 |
+----------+--------+

mysql> SELECT studentcourse.courseid, STUDENT.Name from STUDENT INNER JOIN studentcourse on  STUDENT.Rollno = StudentCourse.Rollno;
+----------+---------+
| courseid | Name    |
+----------+---------+
|        1 | Harsh   |
|        2 | Pratik  |
|        2 | Riyanka |
+----------+---------+
3 rows in set (0.00 sec)

# 2). Left (Outer) Join

mysql> SELECT STUDENT.Rollno, STUDENT.Name, studentcourse.Courseid
    -> FROM STUDENT
    -> LEFT JOIN studentcourse ON STUDENT.Rollno = studentcourse.Rollno;
+--------+---------+----------+
| Rollno | Name    | Courseid |
+--------+---------+----------+
|      1 | Harsh   |        1 |
|      2 | Pratik  |        2 |
|      3 | Riyanka |        2 |
+--------+---------+----------+

# 3). Right (Outer) Join


mysql> SELECT STUDENT.Rollno, STUDENT.Name, studentcourse.Courseid
    -> FROM STUDENT
    -> RIGHT JOIN studentcourse ON STUDENT.Rollno = studentcourse.Rollno;
+--------+---------+----------+
| Rollno | Name    | Courseid |
+--------+---------+----------+
|      1 | Harsh   |        1 |
|      2 | Pratik  |        2 |
|      3 | Riyanka |        2 |
+--------+---------+----------+

# 4). Full (Outer) Join


mysql> SELECT STUDENT.Rollno, STUDENT.Name, studentcourse.Courseid
    -> FROM STUDENT
    -> LEFT JOIN studentcourse ON STUDENT.Rollno = studentcourse.Rollno
    ->
    -> UNION
    ->
    -> SELECT STUDENT.Rollno, STUDENT.Name, studentcourse.Courseid
    -> FROM STUDENT
    -> RIGHT JOIN studentcourse ON STUDENT.Rollno = studentcourse.Rollno;
+--------+---------+----------+
| Rollno | Name    | Courseid |
+--------+---------+----------+
|      1 | Harsh   |        1 |
|      2 | Pratik  |        2 |
|      3 | Riyanka |        2 |
+--------+---------+----------+

# 5). Cross Join

mysql> SELECT STUDENT.Name, studentcourse.Courseid
    -> FROM STUDENT
    -> CROSS JOIN studentcourse;
+---------+----------+
| Name    | Courseid |
+---------+----------+
| Riyanka |        1 |
| Pratik  |        1 |
| Harsh   |        1 |
| Riyanka |        2 |
| Pratik  |        2 |
| Harsh   |        2 |
| Riyanka |        2 |
| Pratik  |        2 |
| Harsh   |        2 |
+---------+----------+
 # Select maximum courseid
mysql> SELECT MAX(Courseid) AS HIGHEST_Courseid FROM studentcourse;
+------------------+
| HIGHEST_Courseid |
+------------------+
|                2 |
+------------------+

OR

mysql> SELECT MAX(Courseid) AS `HIGHEST Courseid` FROM studentcourse;
+------------------+
| HIGHEST Courseid |
+------------------+
|                2 |
+------------------+


 